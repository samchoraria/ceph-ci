import copy
import logging
from typing import Optional

from jinja2 import Environment, PackageLoader, select_autoescape


logger = logging.getLogger(__name__)


class TemplateEngine:
    def render(self, name: str, context: Optional[dict] = None) -> str:
        raise NotImplementedError()


class Jinja2Engine(TemplateEngine):
    def __init__(self):
        self.env = Environment(
            loader=PackageLoader('cephadm', 'templates'),
            autoescape=select_autoescape(['html', 'xml']),
            trim_blocks=True,
            lstrip_blocks=True
        )

    def render(self, name: str, context: Optional[dict] = None) -> str:
        template = self.env.get_template(name)
        if context is None:
            return template.render()
        return template.render(context)


class TemplateMgr:
    def __init__(self):
        self.engine = Jinja2Engine()
        self.managed_header_variable = 'cephadm_managed'
        self.managed_header_text = 'This file is generated by cephadm.'

    def render(self, name: str, context: Optional[dict] = None, managed_header=True) -> str:
        ctx = {}
        if context is not None:
            ctx = copy.deepcopy(context)
        if managed_header:
            ctx[self.managed_header_variable] = self.managed_header_text
        return self.engine.render(name, ctx)
